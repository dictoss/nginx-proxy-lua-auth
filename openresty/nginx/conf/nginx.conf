
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    ## lua config
    lua_package_path '/usr/local/openresty/lualib/mylib/?.lua;;';

    ## reverse proxy config
    upstream mycontent {
        server 192.168.22.115:80;
    }

    ## proxy config
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Real-IP $remote_addr;

    ## proxy cache config
    proxy_buffering on;
    proxy_cache_path              /usr/local/openresty/nginx/proxy_cache levels=1:2 keys_zone=zone1:64m inactive=1d max_size=2048m;
    proxy_temp_path               /usr/local/openresty/nginx/proxy_temp;
    proxy_cache zone1;
    proxy_cache_valid 200 1m;
    proxy_cache_valid any 1m;
    proxy_ignore_headers X-Accel-Redirect X-Accel-Expires Cache-Control Expires Vary Set-Cookie;


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location ~ /lua/access/ {
            access_by_lua_block {
                -- check the client IP address is in our black list
                if ngx.var.remote_addr == "192.168.22.107" then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                ngx.say("OK")
            }
        }

        location ~ ^/reverseproxy1/.*$ {
            internal;

            # remove prefix directory.
            rewrite  ^/reverseproxy1/(.*)$ /$1 break;
            proxy_pass http://mycontent;
        }

        location ~ /lua/content/ {

            set $do_not_cache 0;
            if ($request_method != GET) {
                set $do_not_cache 1;
            }
            if ($uri !~* ".(jpg|png|gif|jpeg|css|js|json|swf|pdf|html|htm)$") {
                set $do_not_cache 1;
            }
            proxy_no_cache $do_not_cache;
            proxy_cache_bypass $do_not_cache;
            proxy_cache_key $scheme$host$uri$is_args$args;

            add_header X-Cache-Status $upstream_cache_status;

            content_by_lua_block {
                --
                -- check the client user and password.
                --
                local lib = require("myprogslib")

                local h_type = ngx.req.get_headers()["X-My-Type"]
                -- h_type = "12345678"
                -- ngx.say(h_type)

                local h_user = ngx.req.get_headers()["X-My-User"]
                -- h_user = "username1"
                -- ngx.say(h_user)

                local ret = lib:auth_custom(h_type, h_user)
                -- ngx.say(ret)
                if ret == "0" then
                    -- get proxy data. ngx.var.uri
                    local target_uri = "/reverseproxy1"..ngx.var.uri
                    -- ngx.say(target_uri)
                    res = ngx.location.capture(target_uri,
                        { share_all_vars = true })
                    ngx.print(res.body)
                elseif ret == "401" then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                else
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
